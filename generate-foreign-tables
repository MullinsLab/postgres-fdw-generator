#!/usr/bin/env perl
use strict;
use warnings;
use 5.020;
use utf8;
use open qw< :std :encoding(UTF-8) >;
use experimental qw< postderef >;
use Getopt::Long::Descriptive;
use DBI;

$|++;

my ($opt, $usage) = describe_options(
  "%c --local-schema [local name] --remote-schema [target schema] --tables [desired tables]",
  [],
  [ "Connects to a Pg database and generates SQL to define each table using a" ],
  [ "foreign data wrapper (via the postgres_fdw extension)." ],
  [],
  [ "Use PGHOST, PGDATABASE, and PGUSER to control connection information.  If a" ],
  [ "password is necessary, use a ~/.pgpass file." ],
  [],
  [ "Please review the output before using, in particular the SERVER, USER MAPPING," ],
  [ "and GRANT definitions, to make sure they are suitable." ],
  [],
  [ "The following options are required:" ],
  [],
  [ 'local-schema=s',   "New database schema in which to define the foreign tables, used for the foreign server definition as well", { required => 1 } ],
  [ 'remote-schema=s',  "Existing database schema containing the source tables for which to create foreign table definitions", { required => 1 } ],
  [],
  [ "Other options are:" ],
  [],
  [ 'server-host=s',    "Foreign server hostname, if it should be different than the host we connect to to read the schema" ],
  [ 'tables=s@',        "List of tables for which to generate definitions; separate multiple tables by commas, spaces, or specify the option multiple times; if not specified all tables in the schema are dumped" ],
  [ 'help',             "print usage message and exit" ],
);
print($usage->text), exit if $opt->help;

my $dbh    = DBI->connect("dbi:Pg:", undef, undef, { RaiseError => 1 });
my $server = $opt->local_schema;
my $host   = $opt->server_host || $ENV{PGHOST} || 'localhost';
my $dbname = $ENV{PGDATABASE} // die "PGDATABASE must be set\n";
my $user   = $ENV{PGUSER}     // die "PGUSER must be set\n";
my @tables =
   sort { fc($a) cmp fc($b) }
    map { split /[,\s]/ }
        ($opt->tables ? $opt->tables->@* : tables());

say <<SQL;
DROP SERVER IF EXISTS $server CASCADE;
DROP SCHEMA IF EXISTS $server CASCADE;

CREATE SCHEMA $server;
CREATE SERVER $server
    FOREIGN DATA WRAPPER postgres_fdw
    OPTIONS (host '$host', dbname '$dbname');

CREATE USER MAPPING
    FOR PUBLIC
    SERVER $server
    OPTIONS (user '$user', password '$user');
SQL

for (@tables) {
    my ($schema, $table) = table($_);

    my $columns =
        join ",\n    ",
        map { column_def($_) }
            columns($schema, $table);

	say <<"    SQL";
CREATE FOREIGN TABLE $server.$table (
    $columns
) SERVER $server OPTIONS (schema_name '$schema', table_name '$table');
    SQL
}

say <<SQL;
GRANT SELECT ON ALL TABLES IN SCHEMA $server TO PUBLIC;
GRANT USAGE  ON               SCHEMA $server TO PUBLIC;
SQL

sub tables {
    my $sql = <<'    SQL';
        SELECT n.nspname || '.' || c.relname
          FROM pg_catalog.pg_class     c
          JOIN pg_catalog.pg_namespace n ON (c.relnamespace = n.oid)
         WHERE c.relkind IN ('r', 'v', 'm')  -- tables, views, materialized views
           AND n.nspname = ?
         ORDER BY 1
    SQL
    return map { @$_ } $dbh->selectall_arrayref($sql, {}, $opt->remote_schema)->@*;
}

sub table {
    my $name = shift;
    my ($schema, $table) = $name =~ /\./
        ? split /\./, $name
        : (undef, $name);
    $schema //= $opt->remote_schema // 'public';
    return ($schema, $table);
}

sub columns {
    my $schema = shift;
    my $table  = shift;
    my $sql    = <<'    SQL';
        SELECT a.attnum                 as ordinal_position,
               n.nspname                as table_schema,
               c.relname                as table_name,
               a.attname                as name,
               NOT a.attnotnull         as is_nullable,
               pg_catalog.format_type(a.atttypid, a.atttypmod)
                                        as data_type

          FROM pg_catalog.pg_class     c
          JOIN pg_catalog.pg_namespace n ON (c.relnamespace = n.oid)
          JOIN pg_catalog.pg_attribute a ON (a.attrelid = c.oid)

         WHERE c.relkind IN ('r', 'v', 'm')  -- tables, views, materialized views
           AND n.nspname = ?
           AND c.relname = ?
           AND a.attnum > 0
           AND NOT attisdropped

         ORDER BY ordinal_position
    SQL
    return $dbh->selectall_arrayref($sql, { Slice => {} }, $schema, $table)->@*;
}

sub column_def {
    my $info = shift;
    return join " ",
        $info->{name},
        type($info),
        ($info->{is_nullable} ? () : "NOT NULL");
}

sub type {
    my $col  = shift;
    my $type = $col->{data_type};

    my $is_array = $type =~ s/\Q[]\E$//;

    my $builtin_type =
        $type =~ /^(integer|bigint|int[48](range)?|numeric|text|character varying(\(\d+\))|jsonb?|boolean)$/
            ? $type
            : "text";

    $builtin_type .= "[]"
        if $is_array;

    return $builtin_type;
}
