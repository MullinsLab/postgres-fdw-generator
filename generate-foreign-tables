#!/usr/bin/env perl
use strict;
use warnings;
use 5.020;
use utf8;
use open qw< :std :encoding(UTF-8) >;
use experimental qw< postderef >;
use Getopt::Long::Descriptive;
use Module::Runtime qw< require_module >;

$|++;

my ($opt, $usage) = describe_options(
  "%c --db-schema [target schema] --perl-schema [DBIx::Class::Schema subclass] --models [Result classes]",
  [],
  [ "Connects to a Pg database via a DBIx::Class::Schema subclass and generates SQL" ],
  [ "to define each table using a foreign data wrapper (via the postgres_fdw" ],
  [ "extension)." ],
  [],
  [ "Use PGHOST, PGDATABASE, and PGUSER to control connection information.  If a" ],
  [ "password is necessary, use a ~/.pgpass file." ],
  [],
  [ "Please review the output before using, in particular the SERVER, USER MAPPING," ],
  [ "and GRANT definitions, to make sure they are suitable." ],
  [],
  [ "The following options are required:" ],
  [],
  [ 'server-name=s',    "Name to use for the foreign server and of the database schema for the foreign table definitions", { required => 1 } ],
  [ 'perl-schema=s',    "Perl package name of your DBIx::Class::Schema subclass; used to connect to your source database", { required => 1 } ],
  [],
  [ "Other options are:" ],
  [],
  [ 'db-schema=s',      "Database schema of source tables" ],
  [ 'server-host=s',    "Foreign server hostname, if it should be different than the host we connect to to read the schema" ],
  [ 'models=s@',        "List of abbreviated model/result classes for which to generate definitions; separate multiple models by commas or specify the option multiple times; if not specified all models are dumped" ],
  [ 'I=s@',             "Adds additional paths to the front of \@INC, similar to perl's own -I option" ],
  [ 'help',             "print usage message and exit" ],
);
print($usage->text), exit if $opt->help;

unshift @INC, $opt->i->@*
    if $opt->i;

require_module($opt->perl_schema);

my $db     = $opt->perl_schema->connect("dbi:Pg:");
my $server = $opt->server_name;
my $host   = $opt->server_host || $ENV{PGHOST} || 'localhost';
my $dbname = $ENV{PGDATABASE};
my $user   = $ENV{PGUSER};
my @models =
   sort { fc($a) cmp fc($b) }
    map { $_->new_result({}) }
    map { $db->resultset($_) or die "Unknown result class '$_'\n" }
    map { split /,/ }
        ($opt->models ? $opt->models->@* : $db->sources);

say <<SQL;
DROP SERVER IF EXISTS $server CASCADE;
DROP SCHEMA IF EXISTS $server CASCADE;

CREATE SCHEMA $server;
CREATE SERVER $server
    FOREIGN DATA WRAPPER postgres_fdw
    OPTIONS (host '$host', dbname '$dbname');

CREATE USER MAPPING
    FOR PUBLIC
    SERVER $server
    OPTIONS (user '$user', password '$user');
SQL

for my $model (@models) {
    my ($schema, $table) = table($model);

    my $colinfo = $model->columns_info;
    my $columns =
        join ",\n    ",
        map { column_def($_, $colinfo->{$_}) }
            $model->columns;

	say <<"    SQL";
CREATE FOREIGN TABLE $server.$table (
    $columns
) SERVER $server OPTIONS (schema_name '$schema', table_name '$table');
    SQL
}

say <<SQL;
GRANT SELECT ON ALL TABLES IN SCHEMA $server TO PUBLIC;
GRANT USAGE  ON               SCHEMA $server TO PUBLIC;
SQL

sub table {
    my $model = shift;
    my ($schema, $table) = $model->table =~ /\./
        ? split /\./, $model->table
        : (undef, $model->table);
    $schema //= $opt->db_schema // 'public';
    return ($schema, $table);
}

sub column_def {
    my $name = shift;
    my $info = shift;
    return join " ",
        $name,
        type($info),
        ($info->{is_nullable} ? () : "NOT NULL");
}

sub type {
    my $col  = shift;
    my $type = $col->{data_type};

    my $known_types  = qr/^((big)?int(eger|$)|numeric|text|jsonb?|boolean)(\Q[]\E)?$/;
    my $builtin_type =
        $type =~ $known_types ?                 $type :
           $type eq "varchar" ? "$type($col->{size})" :
                                               "text" ;

    $builtin_type .= "[]"
        if $type =~ /\Q[]\E/
       and not $builtin_type =~ /\Q[]\E/;

   return $builtin_type;
}
